// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Articles {
  id           String    @id @unique @default(uuid())
  title        String    @unique
  slug         String    @unique
  description  String
  key_words    String[]
  reading_time Int
  content      String
  isPublished  Boolean
  thumbnail    String
  published_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String?
  author       User?     @relation(fields: [authorId], references: [id])
  authorId     String?

  @@map("articles")
}

model User {
  id                String     @id @unique @default(uuid())
  name              String
  articles          Articles[]
  role              String
  about             String?
  sex               String?
  age               Int?
  email             String
  login             String
  password          String
  phone             String?
  profile_picture   String?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @default(now())
  Project           Project[]
  author            Todo[]     @relation("Author")
  completed_by_user Todo[]     @relation("Completed_By")
  Account           Account[]
  Session           Session[]

  @@map("user")
}

model Category {
  id         String     @id @unique @default(uuid())
  name       String
  slug       String
  articles   Articles[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())

  @@map("category")
}

model Testimonial {
  id           String   @id @unique @default(uuid())
  hirerName    String
  hirerEmail   String
  hirerCompany String
  testimonial  String
  ordered_at   DateTime @default(now())
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  @@map("testimonial")
}

model Project {
  id             String    @id @unique @default(uuid())
  title          String
  responsible    User      @relation(fields: [responsible_id], references: [id])
  responsible_id String
  client         Client    @relation(fields: [client_id], references: [id])
  client_id      String
  description    String
  objective      String
  phone          String?
  type_service   String[]
  budget         Float
  status         String
  completed      Boolean
  completed_at   DateTime?
  canceled       Boolean
  canceled_at    DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  @@map("project")
}

model Client {
  id         String    @id @unique @default(uuid())
  name       String
  email      String
  phone      String
  image      String?
  created_at DateTime  @default(now())
  Project    Project[]

  @@map("client")
}

model Todo {
  id                   String    @id @unique @default(uuid())
  title                String
  description          String?
  author               User      @relation("Author", fields: [author_id], references: [id])
  author_id            String
  completed_by_user    User?     @relation("Completed_By", fields: [completed_by_user_id], references: [id])
  completed_by_user_id String?
  priority             String
  has_to_start_at      DateTime  @default(now())
  has_to_finish_at     DateTime  @default(now())
  completed_in_time    Boolean?
  completed            Boolean   @default(false)
  completed_at         DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  @@map("todo")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
